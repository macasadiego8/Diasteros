@using ProjectMoviesDiasteros.Client.Pages.Components
@using ProjectMoviesDiasteros.Client.Model
@inject IServiceMovie movieI

<EditForm Model="Movie" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="container">
        <div class="jumbotron">
            <div class="form-group">
                <div class="row">
                    <div class="col col-sm-9">
                        @* Input para ingresar el nombre de la pelicula *@
                        <InputText class="form-control" @bind-Value="@Movie.Name" placeholder="Nombre película"></InputText>
                        <ValidationMessage For="@(()=>Movie.Name)"></ValidationMessage>
                    </div>
                    <div class="col col-sm-3">
                        @* Checkbox para definir si esta o no en cartelera *@
                        <InputCheckbox id="en_cartelera" class="form-check-input" @bind-Value="@Movie.OnBoard"></InputCheckbox>
                        <label class="form-check-label" for="onBoard">En cartelera</label>
                        <ValidationMessage For="@(()=>Movie.OnBoard)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col">
                        @* Input para ingresar el trailer *@
                        <InputText class="form-control" @bind-Value="@Movie.Trailer" placeholder="Trailer"></InputText>
                        <ValidationMessage For="@(()=>Movie.Trailer)"></ValidationMessage>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            @* Fecha de lanzamiento*@
                            <InputDate class="form-control" @bind-Value="@Movie.Premier"></InputDate>
                            <ValidationMessage For="@(()=>Movie.Premier)"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>
            @* Sinopsis de la pelicula... descripción *@
            <div class="form-group">
                <InputTextArea class="form-control" @bind-Value="@Movie.Sinopsis" placeholder="Sinopsis"></InputTextArea>
                <ValidationMessage For="@(()=>Movie.Sinopsis)"></ValidationMessage>
            </div>
            @* Selección de categorías *@
            <div class="form-group">
                <div class="row">
                    <div class="col">
                        <label>Selecciona las categorías</label>
                        <div>
                            <SelectorMultiple Seleccionados="Seleccionados" NoSeleccionados="NoSeleccionados"></SelectorMultiple>
                        </div>
                    </div>
                    <div class="col">
                        @* Poster => Imagen de la pelicula *@
                        <div class="form-group">
                            <ImageComponent Label="" ImageSelected="ImageSelected" ImageURL=""></ImageComponent>
                        </div>
                    </div>
                </div>
            </div>
            @* Selector TypeaHead para agregar actores *@
            <div class="form-group">
                <label>Actores:</label>
                <div>
                    <SelectorMultipleTypeaHead Context="actor" SearchMethod="SearchActors" ElementosSeleccionados="ActoresSeleccionados">
                        <MyListTemplate>
                            @actor.Name
                        </MyListTemplate>
                        <MyResultTemplate>
                            <img style="width: 30px" src="@actor.Photo" />
                            @actor.Name
                        </MyResultTemplate>
                    </SelectorMultipleTypeaHead>
                </div>
            </div>
            <button type="submit" class="btn btn-success">Aceptar</button>
            <button type="submit" class="btn btn-danger">Cancelar</button>
        </div>
    </div>
</EditForm>
@code {
    [Parameter] public Movie Movie { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Category> CategoriasSeleccionadas { get; set; } = new List<Category>();
    [Parameter] public List<Category> CategoriasNoSeleccionadas { get; set; } = new List<Category>();
    [Parameter] public List<Actor> ActoresSeleccionados{get;set;} = new List<Actor>();

    private string posterTemporal;
    private List<SelectorMultipleModel> NoSeleccionados { get; set; } = new List<SelectorMultipleModel>();

    private List<SelectorMultipleModel> Seleccionados { get; set; } = new List<SelectorMultipleModel>();

    private void ImageSelected(string imageB64)
    {
        Movie.Poster = imageB64;
    }

    protected override void OnInitialized()
    {
        Seleccionados = CategoriasSeleccionadas.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Name)).ToList();
        NoSeleccionados = CategoriasNoSeleccionadas.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Name)).ToList();
        if (!string.IsNullOrWhiteSpace(Movie.Poster))
        {
            posterTemporal = Movie.Poster;
            Movie.Poster = null;
        }
    }    
    private async Task<IEnumerable<Actor>> SearchActors(string searchText)      
    {
        var responseHttp = await movieI.Get<List<Actor>>($"api/actors/search/{searchText}");
        return responseHttp.Response;
    }

    private async Task OnDataAnnotationsValidated()
    {
        Movie.CategoriesMovie = Seleccionados.Select(x=> new CategoryMovie{CategoryId=int.Parse(x.Key)}).ToList();
        if (!string.IsNullOrWhiteSpace(Movie.Poster))
        {
            posterTemporal = null;
        }
        await OnValidSubmit.InvokeAsync(null);
    }
}